#RevBayes tutorials: Molecular dating
#Exercise 1: the global molecular clock model
#February 17, 2020

#This script is master Rev file that loads the data, the files specifying diff.
#model components, and the monitors to record the output and the MCMC sampler.

#Use molecular sequence data to estimate the relationships b/w extant species
#of bears and infer relative speciation times assuming a global (i.e. a strict)
#clock model.Our model assumes sub. rate is constant over time across our tree.
#Rate of substitution is drawn from an exponential distribution.

setwd("/Users/clairewinfrey/Desktop/Spring_2020/Phylometh_2020/RevBayes")

cytb <- readDiscreteCharacterData("tutorial_data/bears_cytb.nex")
n_taxa <- cytb.size()
taxa <- cytb.taxa()

#Create workspace variables to contain all MCMC moves & monitors
moves    = VectorMoves()
monitors = VectorMonitors()

#Setting up the MCMC
#source is a function that lets you load commands and then Rev files into the
#workspace.

source("scripts/tree_BD.Rev") # BD tree prior
source("scripts/clock_global.Rev") # the global clock model
source("scripts/sub_GTRG.Rev") # the GTR model

#create workspace model variable. Mymodel object is a wrapper around entire model
#graph and allows us to pass model to various functions we need for our MCMC.
mymodel = model(sf)

#Specify monitors and output file names. This monitor will all be numerical para-
#meters that and will be written to tab-separated text file (can be opened by
#accessory programs...e.g. Tracer?).

monitors.append( mnModel(filename="output/bears_global.log", printgen=10) )
#printgen =10 indicates that we want to sample our mcmc every 10 cycles.
#This one records ONLY numerical output

 #This writes any parameters that we specify to a file, in this case, our tree
 #topology. The topology needed separate monitor b/c it is not numerical.
monitors.append( mnFile(filename="output/bears_global.trees", printgen=10, timetree) )

#This final monitor prints information to the screen using mnScreen.
#We'll go with age of living bears (extant_mrca) and the diversification rate.
monitors.append( mnScreen(printgen=10, extant_mrca, diversification, branch_rates) )

#Now, we set up a separate workspace variable that defines our MCMC run. To do
#this, we use mcmc function and provide as arguments the three main analysis
#components (our model, our monitors, and our moves).

mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

#Here, we specify that our chain length is 20000 cycles.
mymcmc.run(generations=20000, tuningInterval=200)

#Finally, create a summary tree (after MC is done). Default burn-in is 25%.
trace = readTreeTrace("output/bears_global_run_1.trees")
#Originally this was "output/bears_global.trees" but that didn't work because of
#an apparent issue with parentheses in tree file itself.
mccTree(trace, file="output/bears_global.mcc.tre")

#read MCMC sample of trees from file
#generates max. clade credibilitytree.

q()
