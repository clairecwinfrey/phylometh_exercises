#RevBayes tutorials: Molecular dating: tree_BD_nodedate.Rev
#Exercise 3: Estimating speciation times using node dating
#February 27, 2020

#This script will use info from the fossil record to calibrate the molecular sub.
#rate to absolute time using node dating.
#We will assign probability densities that incorporate temp. info from fossil
#record to particular nodes in the tree. (i.e. this will reflect our prior
#uncertainty in the age of the node.)

#Some of the info from bears_taxa.tsv will be used to constrain age of 2 nodes (root
#of tree and one internal node for Ursinae clade).
##(node calibrations are used to specify age of monphyletic groups that are defined
#a priori).
##Max is oldest age of each sp.; min is age of last appearance (youngest)

#Speciation rate is denoted by λ; Extinction rate is denoted by μ. Each assumed
#to be drawn from ind. from a different exponential distribution.
speciation_rate ~ dnExponential(10)
extinction_rate ~ dnExponential(10)

#We must sample value of both these parameters in proportion to post. prob.
#mvScale proposes multiplicative changes to a parameter. Lambda is tuning value,
#which determines the size pf the proposed change. Weight indicates how many
#times you would like a given move to be performed at each MCMC cycle, a schedule
#of moves!
moves.append( mvScale(speciation_rate, lambda=0.5, tune=true, weight=3.0) )
moves.append( mvScale(extinction_rate, lambda=0.5, tune=true, weight=3.0) )

#Inferring diversification (lambda minus mu) and turnover (mu over lambda). By
#creating deterministic nodes, we can monitor the values of these parameters.
diversification := speciation_rate - extinction_rate
turnover := extinction_rate/speciation_rate

#probability that species are still living (here all extant) is a constant node.
#Thus, as constant node, it needs no moves assigned to it.
rho <- 1.0

#This specifies the prior on our root age and defines a move to sample the age
#of this parameter.
extant_mrca_min <- 1.84
extant_mrca_max <- 49.0

extant_mrca ~ dnUniform(extant_mrca_min, extant_mrca_max)

moves.append( mvScale(extant_mrca, lambda=1, tune=true, weight=5.0) )

#At this point, all parameters of BD model are specified.
#Now, we'll use the BD parameters to define prior dist. on the tree topology
#and divergence times.Using = below creates the distribution as a workspace
#variable.
tree_dist = dnBDP(lambda=speciation_rate, mu=extinction_rate, rho=rho,
rootAge=extant_mrca, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)

#Now we will set priors to constrain parts of the tree topology based on prior info.
#This is often necessary in cases where we incorporate fossil calibration info.
#Below we make subfamily Ursinae monophyletic:
clade_ursinae = clade("Melursus_ursinus", "Ursus_arctos", "Ursus_maritimus",
"Helarctos_malayanus", "Ursus_americanus", "Ursus_thibetanus")
constraints = v(clade_ursinae)

#Specify the final constrained tree prior distribution. We provide the constraints
#and the workspace birth-death distribution to the constrained topology dist.
timetree ~ dnConstrainedTopology(tree_dist, constraints=constraints)

#Add moves for the tree topology ((mvFNPR) and node ages (mvNodeTimeSlideUniform))
#what is the benefit of setting the weight equal to the number of taxa?
moves.append( mvNarrow(timetree, weight=n_taxa) )
moves.append( mvFNPR(timetree, weight=n_taxa/4) )
moves.append( mvNodeTimeSlideUniform(timetree, weight=n_taxa) )
moves.append( mvSubtreeScale(timetree, weight=n_taxa/5.0) )

#Let's record the age of a particular node, the Ursinae clade.
age_ursinae := tmrca(timetree, clade_ursinae)

#Calibrating the age of the node by specifying a diffuse exp. density w/ expected
#value (mean) =1.0, offset by the age of the fossil.
obs_age_ursinae ~ dnExponential(1.0, offset = -age_ursinae)
obs_age_ursinae.clamp(-1.84)
